
//Wifi & MQTT
#include <WiFi.h>
#include <PubSubClient.h>
#include <LoRa.h>
#include "boards.h"
#include "Sender.h"

WiFiClient espClient;
PubSubClient client(espClient);

const char* ssid = "ZYXEL 1";
const char* password = "123456789";
const char* mqtt_server = "192.168.1.224";

long lastMsg = 0;
char msg[50];

int value = 0;
int periodo = 10000;

unsigned long TiempoAhora = 0;

String temp;
String humd;
String pres;
String altd;
String flam;
String gas;
String Berifikatuta;
String Bidali = "";


void setup()
{

  //  Wifi & MQTT
  Serial.begin(115200);
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
  
  initBoard();
  delay(1500);

  LoRa.setPins(RADIO_CS_PIN, RADIO_RST_PIN, RADIO_DI0_PIN);
  if (!LoRa.begin(LoRa_frequency))
  {
    Serial.println("Starting LoRa failed!");
    while (1);
  }
}

void loop()
{
  //Wifi

  if (!client.connected()) {
    reconnect();

  }
  client.loop();


// Ailegatzen zaizkigun mezuak jaso,separatu,Serial-ean agertu eta NodeRed-era bidali 
  int packetSize = LoRa.parsePacket();
  if (packetSize)
  {

    String recv = "";
    // read packet
    while (LoRa.available()) {
      recv += (char)LoRa.read();
    }

    client.publish("ESP32/mezua", msg);
    client.setCallback(callback);

    int pos_temp = recv.indexOf('/');
    int pos_humd = recv.indexOf('&');
    int pos_pres = recv.indexOf('#');
    int pos_altd = recv.indexOf('%');
    int pos_flam = recv.indexOf('$');
    int pos_gas = recv.indexOf('!');

    Serial.println(recv);
    temp = recv.substring(0, pos_temp);
    Serial.print("Tenperatura: ");
    Serial.println(temp);
    humd = recv.substring(pos_temp + 1, pos_humd);
    Serial.print("Hezetasuna: ");
    Serial.println(humd);
    pres = recv.substring(pos_humd + 1, pos_pres);
    Serial.print("Presioa: ");
    Serial.println(pres);
    altd = recv.substring(pos_pres + 1, pos_altd);
    Serial.print("Altitudea: ");
    Serial.println(altd);
    flam = recv.substring(pos_altd + 1, pos_flam);
    Serial.print("Flam: ");
    Serial.println(flam);
    gas = recv.substring(pos_flam + 1, pos_gas);
    Serial.print("Gas: ");
    Serial.println(gas);

    char msg1[50];
    char msg2[50];
    char msg3[50];
    char msg4[50];
    char msg5[50];
    char msg6[50];

    snprintf (msg1, 75, "Temp: %s", temp);
    client.publish("ESP32/temp", msg1);
    snprintf (msg2, 75, "Humd: %s", humd);
    client.publish("ESP32/humd", msg2);
    snprintf (msg3, 75, "Pres: %s", pres);
    client.publish("ESP32/pres", msg3);
    snprintf (msg4, 75, "Altd: %s", altd);
    client.publish("ESP32/altd", msg4);
    snprintf (msg5, 75, "Flam: %s", flam);
    client.publish("ESP32/flam", msg5);
    snprintf (msg6, 75, "Gas: %s", gas);
    client.publish("ESP32/gas", msg6);

    delay(5000);

#ifdef HAS_DISPLAY  //  Lilygo-ren pantailan agertu

    if (u8g2) {
      u8g2->clearBuffer();
      char buf[256];
      u8g2->drawStr(0, 12, "Temp: ");
      u8g2->drawStr(45, 12, temp.c_str());
      u8g2->drawStr(0, 26, "Humd: ");
      u8g2->drawStr(45, 26, humd.c_str());
      u8g2->drawStr(0, 40, "Pres: ");
      u8g2->drawStr(35, 40, pres.c_str());
      u8g2->drawStr(0, 54, "Altd: ");
      u8g2->drawStr(35, 54, altd.c_str());
      if (millis() > TiempoAhora + periodo) {
        TiempoAhora = millis();
        u8g2->clearBuffer();
        u8g2->drawStr(0, 12, "Flam: ");
        u8g2->drawStr(45, 12, flam.c_str());
        u8g2->drawStr(0, 26, "Gas: ");
        u8g2->drawStr(45, 26, gas.c_str());

      }
      u8g2->sendBuffer();

    }
#endif

  }

}

//Wifi-ra konektatu
void setup_wifi() {

  delay(10);
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}


//MQTT konexioa egin
void reconnect() {

  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    if (client.connect("ESP32Client")) {
      Serial.println("connected");
      client.subscribe("ESP32/Itzali");

    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      delay(5000);
    }
  }
}

//NodeRed-era bidali topic-a
void callback(char* topic, byte* payload, unsigned int length) {
  String topicstr = topic;
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();

  if (topicstr.equals("ESP32/Itzali")) {

    Serial.println("LOOOOOLLLL");
    sender();
  }
}
